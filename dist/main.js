(()=>{var __webpack_modules__={662:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(this, function () {\n  'use strict';\n\n  var SpriteSymbol = function SpriteSymbol(ref) {\n    var id = ref.id;\n    var viewBox = ref.viewBox;\n    var content = ref.content;\n    this.id = id;\n    this.viewBox = viewBox;\n    this.content = content;\n  };\n\n  /**\n   * @return {string}\n   */\n  SpriteSymbol.prototype.stringify = function stringify() {\n    return this.content;\n  };\n\n  /**\n   * @return {string}\n   */\n  SpriteSymbol.prototype.toString = function toString() {\n    return this.stringify();\n  };\n  SpriteSymbol.prototype.destroy = function destroy() {\n    var this$1 = this;\n    ['id', 'viewBox', 'content'].forEach(function (prop) {\n      return delete this$1[prop];\n    });\n  };\n\n  /**\n   * @param {string} content\n   * @return {Element}\n   */\n  var parse = function parse(content) {\n    var hasImportNode = !!document.importNode;\n    var doc = new DOMParser().parseFromString(content, 'image/svg+xml').documentElement;\n\n    /**\n     * Fix for browser which are throwing WrongDocumentError\n     * if you insert an element which is not part of the document\n     * @see http://stackoverflow.com/a/7986519/4624403\n     */\n    if (hasImportNode) {\n      return document.importNode(doc, true);\n    }\n    return doc;\n  };\n  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n  var deepmerge = createCommonjsModule(function (module, exports) {\n    (function (root, factory) {\n      if (false) {} else {\n        module.exports = factory();\n      }\n    })(commonjsGlobal, function () {\n      function isMergeableObject(val) {\n        var nonNullObject = val && _typeof(val) === 'object';\n        return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';\n      }\n      function emptyTarget(val) {\n        return Array.isArray(val) ? [] : {};\n      }\n      function cloneIfNecessary(value, optionsArgument) {\n        var clone = optionsArgument && optionsArgument.clone === true;\n        return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;\n      }\n      function defaultArrayMerge(target, source, optionsArgument) {\n        var destination = target.slice();\n        source.forEach(function (e, i) {\n          if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument);\n          } else if (isMergeableObject(e)) {\n            destination[i] = deepmerge(target[i], e, optionsArgument);\n          } else if (target.indexOf(e) === -1) {\n            destination.push(cloneIfNecessary(e, optionsArgument));\n          }\n        });\n        return destination;\n      }\n      function mergeObject(target, source, optionsArgument) {\n        var destination = {};\n        if (isMergeableObject(target)) {\n          Object.keys(target).forEach(function (key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument);\n          });\n        }\n        Object.keys(source).forEach(function (key) {\n          if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument);\n          } else {\n            destination[key] = deepmerge(target[key], source[key], optionsArgument);\n          }\n        });\n        return destination;\n      }\n      function deepmerge(target, source, optionsArgument) {\n        var array = Array.isArray(source);\n        var options = optionsArgument || {\n          arrayMerge: defaultArrayMerge\n        };\n        var arrayMerge = options.arrayMerge || defaultArrayMerge;\n        if (array) {\n          return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);\n        } else {\n          return mergeObject(target, source, optionsArgument);\n        }\n      }\n      deepmerge.all = function deepmergeAll(array, optionsArgument) {\n        if (!Array.isArray(array) || array.length < 2) {\n          throw new Error('first argument should be an array with at least two elements');\n        }\n\n        // we are sure there are at least 2 values, so it is safe to have no initial value\n        return array.reduce(function (prev, next) {\n          return deepmerge(prev, next, optionsArgument);\n        });\n      };\n      return deepmerge;\n    });\n  });\n  var namespaces_1 = createCommonjsModule(function (module, exports) {\n    var namespaces = {\n      svg: {\n        name: 'xmlns',\n        uri: 'http://www.w3.org/2000/svg'\n      },\n      xlink: {\n        name: 'xmlns:xlink',\n        uri: 'http://www.w3.org/1999/xlink'\n      }\n    };\n    exports.default = namespaces;\n    module.exports = exports.default;\n  });\n\n  /**\n   * @param {Object} attrs\n   * @return {string}\n   */\n  var objectToAttrsString = function objectToAttrsString(attrs) {\n    return Object.keys(attrs).map(function (attr) {\n      var value = attrs[attr].toString().replace(/\"/g, '&quot;');\n      return attr + \"=\\\"\" + value + \"\\\"\";\n    }).join(' ');\n  };\n  var svg = namespaces_1.svg;\n  var xlink = namespaces_1.xlink;\n  var defaultAttrs = {};\n  defaultAttrs[svg.name] = svg.uri;\n  defaultAttrs[xlink.name] = xlink.uri;\n\n  /**\n   * @param {string} [content]\n   * @param {Object} [attributes]\n   * @return {string}\n   */\n  var wrapInSvgString = function wrapInSvgString(content, attributes) {\n    if (content === void 0) content = '';\n    var attrs = deepmerge(defaultAttrs, attributes || {});\n    var attrsRendered = objectToAttrsString(attrs);\n    return \"<svg \" + attrsRendered + \">\" + content + \"</svg>\";\n  };\n  var BrowserSpriteSymbol = function (SpriteSymbol$$1) {\n    function BrowserSpriteSymbol() {\n      SpriteSymbol$$1.apply(this, arguments);\n    }\n    if (SpriteSymbol$$1) BrowserSpriteSymbol.__proto__ = SpriteSymbol$$1;\n    BrowserSpriteSymbol.prototype = Object.create(SpriteSymbol$$1 && SpriteSymbol$$1.prototype);\n    BrowserSpriteSymbol.prototype.constructor = BrowserSpriteSymbol;\n    var prototypeAccessors = {\n      isMounted: {}\n    };\n    prototypeAccessors.isMounted.get = function () {\n      return !!this.node;\n    };\n\n    /**\n     * @param {Element} node\n     * @return {BrowserSpriteSymbol}\n     */\n    BrowserSpriteSymbol.createFromExistingNode = function createFromExistingNode(node) {\n      return new BrowserSpriteSymbol({\n        id: node.getAttribute('id'),\n        viewBox: node.getAttribute('viewBox'),\n        content: node.outerHTML\n      });\n    };\n    BrowserSpriteSymbol.prototype.destroy = function destroy() {\n      if (this.isMounted) {\n        this.unmount();\n      }\n      SpriteSymbol$$1.prototype.destroy.call(this);\n    };\n\n    /**\n     * @param {Element|string} target\n     * @return {Element}\n     */\n    BrowserSpriteSymbol.prototype.mount = function mount(target) {\n      if (this.isMounted) {\n        return this.node;\n      }\n      var mountTarget = typeof target === 'string' ? document.querySelector(target) : target;\n      var node = this.render();\n      this.node = node;\n      mountTarget.appendChild(node);\n      return node;\n    };\n\n    /**\n     * @return {Element}\n     */\n    BrowserSpriteSymbol.prototype.render = function render() {\n      var content = this.stringify();\n      return parse(wrapInSvgString(content)).childNodes[0];\n    };\n    BrowserSpriteSymbol.prototype.unmount = function unmount() {\n      this.node.parentNode.removeChild(this.node);\n    };\n    Object.defineProperties(BrowserSpriteSymbol.prototype, prototypeAccessors);\n    return BrowserSpriteSymbol;\n  }(SpriteSymbol);\n  return BrowserSpriteSymbol;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///662\n")},58:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(this, function () {\n  'use strict';\n\n  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n  var deepmerge = createCommonjsModule(function (module, exports) {\n    (function (root, factory) {\n      if (false) {} else {\n        module.exports = factory();\n      }\n    })(commonjsGlobal, function () {\n      function isMergeableObject(val) {\n        var nonNullObject = val && _typeof(val) === 'object';\n        return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';\n      }\n      function emptyTarget(val) {\n        return Array.isArray(val) ? [] : {};\n      }\n      function cloneIfNecessary(value, optionsArgument) {\n        var clone = optionsArgument && optionsArgument.clone === true;\n        return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;\n      }\n      function defaultArrayMerge(target, source, optionsArgument) {\n        var destination = target.slice();\n        source.forEach(function (e, i) {\n          if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument);\n          } else if (isMergeableObject(e)) {\n            destination[i] = deepmerge(target[i], e, optionsArgument);\n          } else if (target.indexOf(e) === -1) {\n            destination.push(cloneIfNecessary(e, optionsArgument));\n          }\n        });\n        return destination;\n      }\n      function mergeObject(target, source, optionsArgument) {\n        var destination = {};\n        if (isMergeableObject(target)) {\n          Object.keys(target).forEach(function (key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument);\n          });\n        }\n        Object.keys(source).forEach(function (key) {\n          if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument);\n          } else {\n            destination[key] = deepmerge(target[key], source[key], optionsArgument);\n          }\n        });\n        return destination;\n      }\n      function deepmerge(target, source, optionsArgument) {\n        var array = Array.isArray(source);\n        var options = optionsArgument || {\n          arrayMerge: defaultArrayMerge\n        };\n        var arrayMerge = options.arrayMerge || defaultArrayMerge;\n        if (array) {\n          return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);\n        } else {\n          return mergeObject(target, source, optionsArgument);\n        }\n      }\n      deepmerge.all = function deepmergeAll(array, optionsArgument) {\n        if (!Array.isArray(array) || array.length < 2) {\n          throw new Error('first argument should be an array with at least two elements');\n        }\n\n        // we are sure there are at least 2 values, so it is safe to have no initial value\n        return array.reduce(function (prev, next) {\n          return deepmerge(prev, next, optionsArgument);\n        });\n      };\n      return deepmerge;\n    });\n  });\n\n  //      \n  // An event handler can take an optional event argument\n  // and should not return a value\n\n  // An array of all currently registered event handlers for a type\n\n  // A map of event types and their corresponding event handlers.\n\n  /** Mitt: Tiny (~200b) functional event emitter / pubsub.\n   *  @name mitt\n   *  @returns {Mitt}\n   */\n  function mitt(all) {\n    all = all || Object.create(null);\n    return {\n      /**\n       * Register an event handler for the given type.\n       *\n       * @param  {String} type\tType of event to listen for, or `\"*\"` for all events\n       * @param  {Function} handler Function to call in response to given event\n       * @memberOf mitt\n       */\n      on: function on(type, handler) {\n        (all[type] || (all[type] = [])).push(handler);\n      },\n      /**\n       * Remove an event handler for the given type.\n       *\n       * @param  {String} type\tType of event to unregister `handler` from, or `\"*\"`\n       * @param  {Function} handler Handler function to remove\n       * @memberOf mitt\n       */\n      off: function off(type, handler) {\n        if (all[type]) {\n          all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n        }\n      },\n      /**\n       * Invoke all handlers for the given type.\n       * If present, `\"*\"` handlers are invoked after type-matched handlers.\n       *\n       * @param {String} type  The event type to invoke\n       * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n       * @memberof mitt\n       */\n      emit: function emit(type, evt) {\n        (all[type] || []).map(function (handler) {\n          handler(evt);\n        });\n        (all['*'] || []).map(function (handler) {\n          handler(type, evt);\n        });\n      }\n    };\n  }\n  var namespaces_1 = createCommonjsModule(function (module, exports) {\n    var namespaces = {\n      svg: {\n        name: 'xmlns',\n        uri: 'http://www.w3.org/2000/svg'\n      },\n      xlink: {\n        name: 'xmlns:xlink',\n        uri: 'http://www.w3.org/1999/xlink'\n      }\n    };\n    exports.default = namespaces;\n    module.exports = exports.default;\n  });\n\n  /**\n   * @param {Object} attrs\n   * @return {string}\n   */\n  var objectToAttrsString = function objectToAttrsString(attrs) {\n    return Object.keys(attrs).map(function (attr) {\n      var value = attrs[attr].toString().replace(/\"/g, '&quot;');\n      return attr + \"=\\\"\" + value + \"\\\"\";\n    }).join(' ');\n  };\n  var svg = namespaces_1.svg;\n  var xlink = namespaces_1.xlink;\n  var defaultAttrs = {};\n  defaultAttrs[svg.name] = svg.uri;\n  defaultAttrs[xlink.name] = xlink.uri;\n\n  /**\n   * @param {string} [content]\n   * @param {Object} [attributes]\n   * @return {string}\n   */\n  var wrapInSvgString = function wrapInSvgString(content, attributes) {\n    if (content === void 0) content = '';\n    var attrs = deepmerge(defaultAttrs, attributes || {});\n    var attrsRendered = objectToAttrsString(attrs);\n    return \"<svg \" + attrsRendered + \">\" + content + \"</svg>\";\n  };\n  var svg$1 = namespaces_1.svg;\n  var xlink$1 = namespaces_1.xlink;\n  var defaultConfig = {\n    attrs: (obj = {\n      style: ['position: absolute', 'width: 0', 'height: 0'].join('; '),\n      'aria-hidden': 'true'\n    }, obj[svg$1.name] = svg$1.uri, obj[xlink$1.name] = xlink$1.uri, obj)\n  };\n  var obj;\n  var Sprite = function Sprite(config) {\n    this.config = deepmerge(defaultConfig, config || {});\n    this.symbols = [];\n  };\n\n  /**\n   * Add new symbol. If symbol with the same id exists it will be replaced.\n   * @param {SpriteSymbol} symbol\n   * @return {boolean} `true` - symbol was added, `false` - replaced\n   */\n  Sprite.prototype.add = function add(symbol) {\n    var ref = this;\n    var symbols = ref.symbols;\n    var existing = this.find(symbol.id);\n    if (existing) {\n      symbols[symbols.indexOf(existing)] = symbol;\n      return false;\n    }\n    symbols.push(symbol);\n    return true;\n  };\n\n  /**\n   * Remove symbol & destroy it\n   * @param {string} id\n   * @return {boolean} `true` - symbol was found & successfully destroyed, `false` - otherwise\n   */\n  Sprite.prototype.remove = function remove(id) {\n    var ref = this;\n    var symbols = ref.symbols;\n    var symbol = this.find(id);\n    if (symbol) {\n      symbols.splice(symbols.indexOf(symbol), 1);\n      symbol.destroy();\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * @param {string} id\n   * @return {SpriteSymbol|null}\n   */\n  Sprite.prototype.find = function find(id) {\n    return this.symbols.filter(function (s) {\n      return s.id === id;\n    })[0] || null;\n  };\n\n  /**\n   * @param {string} id\n   * @return {boolean}\n   */\n  Sprite.prototype.has = function has(id) {\n    return this.find(id) !== null;\n  };\n\n  /**\n   * @return {string}\n   */\n  Sprite.prototype.stringify = function stringify() {\n    var ref = this.config;\n    var attrs = ref.attrs;\n    var stringifiedSymbols = this.symbols.map(function (s) {\n      return s.stringify();\n    }).join('');\n    return wrapInSvgString(stringifiedSymbols, attrs);\n  };\n\n  /**\n   * @return {string}\n   */\n  Sprite.prototype.toString = function toString() {\n    return this.stringify();\n  };\n  Sprite.prototype.destroy = function destroy() {\n    this.symbols.forEach(function (s) {\n      return s.destroy();\n    });\n  };\n  var SpriteSymbol = function SpriteSymbol(ref) {\n    var id = ref.id;\n    var viewBox = ref.viewBox;\n    var content = ref.content;\n    this.id = id;\n    this.viewBox = viewBox;\n    this.content = content;\n  };\n\n  /**\n   * @return {string}\n   */\n  SpriteSymbol.prototype.stringify = function stringify() {\n    return this.content;\n  };\n\n  /**\n   * @return {string}\n   */\n  SpriteSymbol.prototype.toString = function toString() {\n    return this.stringify();\n  };\n  SpriteSymbol.prototype.destroy = function destroy() {\n    var this$1 = this;\n    ['id', 'viewBox', 'content'].forEach(function (prop) {\n      return delete this$1[prop];\n    });\n  };\n\n  /**\n   * @param {string} content\n   * @return {Element}\n   */\n  var parse = function parse(content) {\n    var hasImportNode = !!document.importNode;\n    var doc = new DOMParser().parseFromString(content, 'image/svg+xml').documentElement;\n\n    /**\n     * Fix for browser which are throwing WrongDocumentError\n     * if you insert an element which is not part of the document\n     * @see http://stackoverflow.com/a/7986519/4624403\n     */\n    if (hasImportNode) {\n      return document.importNode(doc, true);\n    }\n    return doc;\n  };\n  var BrowserSpriteSymbol = function (SpriteSymbol$$1) {\n    function BrowserSpriteSymbol() {\n      SpriteSymbol$$1.apply(this, arguments);\n    }\n    if (SpriteSymbol$$1) BrowserSpriteSymbol.__proto__ = SpriteSymbol$$1;\n    BrowserSpriteSymbol.prototype = Object.create(SpriteSymbol$$1 && SpriteSymbol$$1.prototype);\n    BrowserSpriteSymbol.prototype.constructor = BrowserSpriteSymbol;\n    var prototypeAccessors = {\n      isMounted: {}\n    };\n    prototypeAccessors.isMounted.get = function () {\n      return !!this.node;\n    };\n\n    /**\n     * @param {Element} node\n     * @return {BrowserSpriteSymbol}\n     */\n    BrowserSpriteSymbol.createFromExistingNode = function createFromExistingNode(node) {\n      return new BrowserSpriteSymbol({\n        id: node.getAttribute('id'),\n        viewBox: node.getAttribute('viewBox'),\n        content: node.outerHTML\n      });\n    };\n    BrowserSpriteSymbol.prototype.destroy = function destroy() {\n      if (this.isMounted) {\n        this.unmount();\n      }\n      SpriteSymbol$$1.prototype.destroy.call(this);\n    };\n\n    /**\n     * @param {Element|string} target\n     * @return {Element}\n     */\n    BrowserSpriteSymbol.prototype.mount = function mount(target) {\n      if (this.isMounted) {\n        return this.node;\n      }\n      var mountTarget = typeof target === 'string' ? document.querySelector(target) : target;\n      var node = this.render();\n      this.node = node;\n      mountTarget.appendChild(node);\n      return node;\n    };\n\n    /**\n     * @return {Element}\n     */\n    BrowserSpriteSymbol.prototype.render = function render() {\n      var content = this.stringify();\n      return parse(wrapInSvgString(content)).childNodes[0];\n    };\n    BrowserSpriteSymbol.prototype.unmount = function unmount() {\n      this.node.parentNode.removeChild(this.node);\n    };\n    Object.defineProperties(BrowserSpriteSymbol.prototype, prototypeAccessors);\n    return BrowserSpriteSymbol;\n  }(SpriteSymbol);\n  var defaultConfig$1 = {\n    /**\n     * Should following options be automatically configured:\n     * - `syncUrlsWithBaseTag`\n     * - `locationChangeAngularEmitter`\n     * - `moveGradientsOutsideSymbol`\n     * @type {boolean}\n     */\n    autoConfigure: true,\n    /**\n     * Default mounting selector\n     * @type {string}\n     */\n    mountTo: 'body',\n    /**\n     * Fix disappearing SVG elements when <base href> exists.\n     * Executes when sprite mounted.\n     * @see http://stackoverflow.com/a/18265336/796152\n     * @see https://github.com/everdimension/angular-svg-base-fix\n     * @see https://github.com/angular/angular.js/issues/8934#issuecomment-56568466\n     * @type {boolean}\n     */\n    syncUrlsWithBaseTag: false,\n    /**\n     * Should sprite listen custom location change event\n     * @type {boolean}\n     */\n    listenLocationChangeEvent: true,\n    /**\n     * Custom window event name which should be emitted to update sprite urls\n     * @type {string}\n     */\n    locationChangeEvent: 'locationChange',\n    /**\n     * Emit location change event in Angular automatically\n     * @type {boolean}\n     */\n    locationChangeAngularEmitter: false,\n    /**\n     * Selector to find symbols usages when updating sprite urls\n     * @type {string}\n     */\n    usagesToUpdate: 'use[*|href]',\n    /**\n     * Fix Firefox bug when gradients and patterns don't work if they are within a symbol.\n     * Executes when sprite is rendered, but not mounted.\n     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=306674\n     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=353575\n     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=1235364\n     * @type {boolean}\n     */\n    moveGradientsOutsideSymbol: false\n  };\n\n  /**\n   * @param {*} arrayLike\n   * @return {Array}\n   */\n  var arrayFrom = function arrayFrom(arrayLike) {\n    return Array.prototype.slice.call(arrayLike, 0);\n  };\n  var browser = {\n    isChrome: function isChrome() {\n      return /chrome/i.test(navigator.userAgent);\n    },\n    isFirefox: function isFirefox() {\n      return /firefox/i.test(navigator.userAgent);\n    },\n    // https://msdn.microsoft.com/en-us/library/ms537503(v=vs.85).aspx\n    isIE: function isIE() {\n      return /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent);\n    },\n    isEdge: function isEdge() {\n      return /edge/i.test(navigator.userAgent);\n    }\n  };\n\n  /**\n   * @param {string} name\n   * @param {*} data\n   */\n  var dispatchEvent = function dispatchEvent(name, data) {\n    var event = document.createEvent('CustomEvent');\n    event.initCustomEvent(name, false, false, data);\n    window.dispatchEvent(event);\n  };\n\n  /**\n   * IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.\n   * This trick will trigger IE to read and use any existing SVG <style> tags.\n   * @see https://github.com/iconic/SVGInjector/issues/23\n   * @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n   *\n   * @param {Element} node DOM Element to search <style> tags in\n   * @return {Array<HTMLStyleElement>}\n   */\n  var evalStylesIEWorkaround = function evalStylesIEWorkaround(node) {\n    var updatedNodes = [];\n    arrayFrom(node.querySelectorAll('style')).forEach(function (style) {\n      style.textContent += '';\n      updatedNodes.push(style);\n    });\n    return updatedNodes;\n  };\n\n  /**\n   * @param {string} [url] If not provided - current URL will be used\n   * @return {string}\n   */\n  var getUrlWithoutFragment = function getUrlWithoutFragment(url) {\n    return (url || window.location.href).split('#')[0];\n  };\n\n  /* global angular */\n  /**\n   * @param {string} eventName\n   */\n  var locationChangeAngularEmitter = function locationChangeAngularEmitter(eventName) {\n    angular.module('ng').run(['$rootScope', function ($rootScope) {\n      $rootScope.$on('$locationChangeSuccess', function (e, newUrl, oldUrl) {\n        dispatchEvent(eventName, {\n          oldUrl: oldUrl,\n          newUrl: newUrl\n        });\n      });\n    }]);\n  };\n  var defaultSelector = 'linearGradient, radialGradient, pattern, mask, clipPath';\n\n  /**\n   * @param {Element} svg\n   * @param {string} [selector]\n   * @return {Element}\n   */\n  var moveGradientsOutsideSymbol = function moveGradientsOutsideSymbol(svg, selector) {\n    if (selector === void 0) selector = defaultSelector;\n    arrayFrom(svg.querySelectorAll('symbol')).forEach(function (symbol) {\n      arrayFrom(symbol.querySelectorAll(selector)).forEach(function (node) {\n        symbol.parentNode.insertBefore(node, symbol);\n      });\n    });\n    return svg;\n  };\n\n  /**\n   * @param {NodeList} nodes\n   * @param {Function} [matcher]\n   * @return {Attr[]}\n   */\n  function selectAttributes(nodes, matcher) {\n    var attrs = arrayFrom(nodes).reduce(function (acc, node) {\n      if (!node.attributes) {\n        return acc;\n      }\n      var arrayfied = arrayFrom(node.attributes);\n      var matched = matcher ? arrayfied.filter(matcher) : arrayfied;\n      return acc.concat(matched);\n    }, []);\n    return attrs;\n  }\n\n  /**\n   * @param {NodeList|Node} nodes\n   * @param {boolean} [clone=true]\n   * @return {string}\n   */\n\n  var xLinkNS = namespaces_1.xlink.uri;\n  var xLinkAttrName = 'xlink:href';\n\n  // eslint-disable-next-line no-useless-escape\n  var specialUrlCharsPattern = /[{}|\\\\\\^\\[\\]`\"<>]/g;\n  function encoder(url) {\n    return url.replace(specialUrlCharsPattern, function (match) {\n      return \"%\" + match[0].charCodeAt(0).toString(16).toUpperCase();\n    });\n  }\n  function escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n  }\n\n  /**\n   * @param {NodeList} nodes\n   * @param {string} startsWith\n   * @param {string} replaceWith\n   * @return {NodeList}\n   */\n  function updateReferences(nodes, startsWith, replaceWith) {\n    arrayFrom(nodes).forEach(function (node) {\n      var href = node.getAttribute(xLinkAttrName);\n      if (href && href.indexOf(startsWith) === 0) {\n        var newUrl = href.replace(startsWith, replaceWith);\n        node.setAttributeNS(xLinkNS, xLinkAttrName, newUrl);\n      }\n    });\n    return nodes;\n  }\n\n  /**\n   * List of SVG attributes to update url() target in them\n   */\n  var attList = ['clipPath', 'colorProfile', 'src', 'cursor', 'fill', 'filter', 'marker', 'markerStart', 'markerMid', 'markerEnd', 'mask', 'stroke', 'style'];\n  var attSelector = attList.map(function (attr) {\n    return \"[\" + attr + \"]\";\n  }).join(',');\n\n  /**\n   * Update URLs in svg image (like `fill=\"url(...)\"`) and update referencing elements\n   * @param {Element} svg\n   * @param {NodeList} references\n   * @param {string|RegExp} startsWith\n   * @param {string} replaceWith\n   * @return {void}\n   *\n   * @example\n   * const sprite = document.querySelector('svg.sprite');\n   * const usages = document.querySelectorAll('use');\n   * updateUrls(sprite, usages, '#', 'prefix#');\n   */\n  var updateUrls = function updateUrls(svg, references, startsWith, replaceWith) {\n    var startsWithEncoded = encoder(startsWith);\n    var replaceWithEncoded = encoder(replaceWith);\n    var nodes = svg.querySelectorAll(attSelector);\n    var attrs = selectAttributes(nodes, function (ref) {\n      var localName = ref.localName;\n      var value = ref.value;\n      return attList.indexOf(localName) !== -1 && value.indexOf(\"url(\" + startsWithEncoded) !== -1;\n    });\n    attrs.forEach(function (attr) {\n      return attr.value = attr.value.replace(new RegExp(escapeRegExp(startsWithEncoded), 'g'), replaceWithEncoded);\n    });\n    updateReferences(references, startsWithEncoded, replaceWithEncoded);\n  };\n\n  /**\n   * Internal emitter events\n   * @enum\n   * @private\n   */\n  var Events = {\n    MOUNT: 'mount',\n    SYMBOL_MOUNT: 'symbol_mount'\n  };\n  var BrowserSprite = function (Sprite$$1) {\n    function BrowserSprite(cfg) {\n      var this$1 = this;\n      if (cfg === void 0) cfg = {};\n      Sprite$$1.call(this, deepmerge(defaultConfig$1, cfg));\n      var emitter = mitt();\n      this._emitter = emitter;\n      this.node = null;\n      var ref = this;\n      var config = ref.config;\n      if (config.autoConfigure) {\n        this._autoConfigure(cfg);\n      }\n      if (config.syncUrlsWithBaseTag) {\n        var baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\n        emitter.on(Events.MOUNT, function () {\n          return this$1.updateUrls('#', baseUrl);\n        });\n      }\n      var handleLocationChange = this._handleLocationChange.bind(this);\n      this._handleLocationChange = handleLocationChange;\n\n      // Provide way to update sprite urls externally via dispatching custom window event\n      if (config.listenLocationChangeEvent) {\n        window.addEventListener(config.locationChangeEvent, handleLocationChange);\n      }\n\n      // Emit location change event in Angular automatically\n      if (config.locationChangeAngularEmitter) {\n        locationChangeAngularEmitter(config.locationChangeEvent);\n      }\n\n      // After sprite mounted\n      emitter.on(Events.MOUNT, function (spriteNode) {\n        if (config.moveGradientsOutsideSymbol) {\n          moveGradientsOutsideSymbol(spriteNode);\n        }\n      });\n\n      // After symbol mounted into sprite\n      emitter.on(Events.SYMBOL_MOUNT, function (symbolNode) {\n        if (config.moveGradientsOutsideSymbol) {\n          moveGradientsOutsideSymbol(symbolNode.parentNode);\n        }\n        if (browser.isIE() || browser.isEdge()) {\n          evalStylesIEWorkaround(symbolNode);\n        }\n      });\n    }\n    if (Sprite$$1) BrowserSprite.__proto__ = Sprite$$1;\n    BrowserSprite.prototype = Object.create(Sprite$$1 && Sprite$$1.prototype);\n    BrowserSprite.prototype.constructor = BrowserSprite;\n    var prototypeAccessors = {\n      isMounted: {}\n    };\n\n    /**\n     * @return {boolean}\n     */\n    prototypeAccessors.isMounted.get = function () {\n      return !!this.node;\n    };\n\n    /**\n     * Automatically configure following options\n     * - `syncUrlsWithBaseTag`\n     * - `locationChangeAngularEmitter`\n     * - `moveGradientsOutsideSymbol`\n     * @param {Object} cfg\n     * @private\n     */\n    BrowserSprite.prototype._autoConfigure = function _autoConfigure(cfg) {\n      var ref = this;\n      var config = ref.config;\n      if (typeof cfg.syncUrlsWithBaseTag === 'undefined') {\n        config.syncUrlsWithBaseTag = typeof document.getElementsByTagName('base')[0] !== 'undefined';\n      }\n      if (typeof cfg.locationChangeAngularEmitter === 'undefined') {\n        config.locationChangeAngularEmitter = typeof window.angular !== 'undefined';\n      }\n      if (typeof cfg.moveGradientsOutsideSymbol === 'undefined') {\n        config.moveGradientsOutsideSymbol = browser.isFirefox();\n      }\n    };\n\n    /**\n     * @param {Event} event\n     * @param {Object} event.detail\n     * @param {string} event.detail.oldUrl\n     * @param {string} event.detail.newUrl\n     * @private\n     */\n    BrowserSprite.prototype._handleLocationChange = function _handleLocationChange(event) {\n      var ref = event.detail;\n      var oldUrl = ref.oldUrl;\n      var newUrl = ref.newUrl;\n      this.updateUrls(oldUrl, newUrl);\n    };\n\n    /**\n     * Add new symbol. If symbol with the same id exists it will be replaced.\n     * If sprite already mounted - `symbol.mount(sprite.node)` will be called.\n     * @fires Events#SYMBOL_MOUNT\n     * @param {BrowserSpriteSymbol} symbol\n     * @return {boolean} `true` - symbol was added, `false` - replaced\n     */\n    BrowserSprite.prototype.add = function add(symbol) {\n      var sprite = this;\n      var isNewSymbol = Sprite$$1.prototype.add.call(this, symbol);\n      if (this.isMounted && isNewSymbol) {\n        symbol.mount(sprite.node);\n        this._emitter.emit(Events.SYMBOL_MOUNT, symbol.node);\n      }\n      return isNewSymbol;\n    };\n\n    /**\n     * Attach to existing DOM node\n     * @param {string|Element} target\n     * @return {Element|null} attached DOM Element. null if node to attach not found.\n     */\n    BrowserSprite.prototype.attach = function attach(target) {\n      var this$1 = this;\n      var sprite = this;\n      if (sprite.isMounted) {\n        return sprite.node;\n      }\n\n      /** @type Element */\n      var node = typeof target === 'string' ? document.querySelector(target) : target;\n      sprite.node = node;\n\n      // Already added symbols needs to be mounted\n      this.symbols.forEach(function (symbol) {\n        symbol.mount(sprite.node);\n        this$1._emitter.emit(Events.SYMBOL_MOUNT, symbol.node);\n      });\n\n      // Create symbols from existing DOM nodes, add and mount them\n      arrayFrom(node.querySelectorAll('symbol')).forEach(function (symbolNode) {\n        var symbol = BrowserSpriteSymbol.createFromExistingNode(symbolNode);\n        symbol.node = symbolNode; // hack to prevent symbol mounting to sprite when adding\n        sprite.add(symbol);\n      });\n      this._emitter.emit(Events.MOUNT, node);\n      return node;\n    };\n    BrowserSprite.prototype.destroy = function destroy() {\n      var ref = this;\n      var config = ref.config;\n      var symbols = ref.symbols;\n      var _emitter = ref._emitter;\n      symbols.forEach(function (s) {\n        return s.destroy();\n      });\n      _emitter.off('*');\n      window.removeEventListener(config.locationChangeEvent, this._handleLocationChange);\n      if (this.isMounted) {\n        this.unmount();\n      }\n    };\n\n    /**\n     * @fires Events#MOUNT\n     * @param {string|Element} [target]\n     * @param {boolean} [prepend=false]\n     * @return {Element|null} rendered sprite node. null if mount node not found.\n     */\n    BrowserSprite.prototype.mount = function mount(target, prepend) {\n      if (target === void 0) target = this.config.mountTo;\n      if (prepend === void 0) prepend = false;\n      var sprite = this;\n      if (sprite.isMounted) {\n        return sprite.node;\n      }\n      var mountNode = typeof target === 'string' ? document.querySelector(target) : target;\n      var node = sprite.render();\n      this.node = node;\n      if (prepend && mountNode.childNodes[0]) {\n        mountNode.insertBefore(node, mountNode.childNodes[0]);\n      } else {\n        mountNode.appendChild(node);\n      }\n      this._emitter.emit(Events.MOUNT, node);\n      return node;\n    };\n\n    /**\n     * @return {Element}\n     */\n    BrowserSprite.prototype.render = function render() {\n      return parse(this.stringify());\n    };\n\n    /**\n     * Detach sprite from the DOM\n     */\n    BrowserSprite.prototype.unmount = function unmount() {\n      this.node.parentNode.removeChild(this.node);\n    };\n\n    /**\n     * Update URLs in sprite and usage elements\n     * @param {string} oldUrl\n     * @param {string} newUrl\n     * @return {boolean} `true` - URLs was updated, `false` - sprite is not mounted\n     */\n    BrowserSprite.prototype.updateUrls = function updateUrls$1(oldUrl, newUrl) {\n      if (!this.isMounted) {\n        return false;\n      }\n      var usages = document.querySelectorAll(this.config.usagesToUpdate);\n      updateUrls(this.node, usages, getUrlWithoutFragment(oldUrl) + \"#\", getUrlWithoutFragment(newUrl) + \"#\");\n      return true;\n    };\n    Object.defineProperties(BrowserSprite.prototype, prototypeAccessors);\n    return BrowserSprite;\n  }(Sprite);\n  var ready$1 = createCommonjsModule(function (module) {\n    /*!\n      * domready (c) Dustin Diaz 2014 - License MIT\n      */\n    !function (name, definition) {\n      {\n        module.exports = definition();\n      }\n    }('domready', function () {\n      var fns = [],\n        _listener,\n        doc = document,\n        hack = doc.documentElement.doScroll,\n        domContentLoaded = 'DOMContentLoaded',\n        loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState);\n      if (!loaded) {\n        doc.addEventListener(domContentLoaded, _listener = function listener() {\n          doc.removeEventListener(domContentLoaded, _listener);\n          loaded = 1;\n          while (_listener = fns.shift()) {\n            _listener();\n          }\n        });\n      }\n      return function (fn) {\n        loaded ? setTimeout(fn, 0) : fns.push(fn);\n      };\n    });\n  });\n  var spriteNodeId = '__SVG_SPRITE_NODE__';\n  var spriteGlobalVarName = '__SVG_SPRITE__';\n  var isSpriteExists = !!window[spriteGlobalVarName];\n\n  // eslint-disable-next-line import/no-mutable-exports\n  var sprite;\n  if (isSpriteExists) {\n    sprite = window[spriteGlobalVarName];\n  } else {\n    sprite = new BrowserSprite({\n      attrs: {\n        id: spriteNodeId,\n        'aria-hidden': 'true'\n      }\n    });\n    window[spriteGlobalVarName] = sprite;\n  }\n  var loadSprite = function loadSprite() {\n    /**\n     * Check for page already contains sprite node\n     * If found - attach to and reuse it's content\n     * If not - render and mount the new sprite\n     */\n    var existing = document.getElementById(spriteNodeId);\n    if (existing) {\n      sprite.attach(existing);\n    } else {\n      sprite.mount(document.body, true);\n    }\n  };\n  if (document.body) {\n    loadSprite();\n  } else {\n    ready$1(loadSprite);\n  }\n  var sprite$1 = sprite;\n  return sprite$1;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///58\n")},792:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/svg-baker-runtime/browser-symbol.js\nvar browser_symbol = __webpack_require__(662);\nvar browser_symbol_default = /*#__PURE__*/__webpack_require__.n(browser_symbol);\n// EXTERNAL MODULE: ./node_modules/svg-sprite-loader/runtime/browser-sprite.build.js\nvar browser_sprite_build = __webpack_require__(58);\nvar browser_sprite_build_default = /*#__PURE__*/__webpack_require__.n(browser_sprite_build);\n;// CONCATENATED MODULE: ./images/icons/nav.svg\n\n\nvar symbol = new (browser_symbol_default())({\n  "id": "nav",\n  "use": "nav-usage",\n  "viewBox": "0 0 14 8",\n  "content": "<symbol viewBox=\\"0 0 14 8\\" xmlns=\\"http://www.w3.org/2000/svg\\" id=\\"nav\\">\\n<path d=\\"M6.99999 4.95L2.04999 0L0.635986 1.414L6.99999 7.778L13.364 1.414L11.95 0L6.99999 4.95Z\\" fill=\\"currentColor\\" c=\\"\\" />\\n</symbol>"\n});\nvar result = browser_sprite_build_default().add(symbol);\n/* harmony default export */ const nav = ((/* unused pure expression or super */ null && (symbol)));\n;// CONCATENATED MODULE: ./images/icons/project-menu.svg\n\n\nvar project_menu_symbol = new (browser_symbol_default())({\n  "id": "project-menu",\n  "use": "project-menu-usage",\n  "viewBox": "0 0 4 13",\n  "content": "<symbol viewBox=\\"0 0 4 13\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\" id=\\"project-menu\\">\\n<path d=\\"M3.5 11.5C3.5 11.8978 3.34196 12.2794 3.06066 12.5607C2.77936 12.842 2.39782 13 2 13C1.60218 13 1.22064 12.842 0.93934 12.5607C0.658035 12.2794 0.5 11.8978 0.5 11.5C0.5 11.1022 0.658035 10.7206 0.93934 10.4393C1.22064 10.158 1.60218 10 2 10C2.39782 10 2.77936 10.158 3.06066 10.4393C3.34196 10.7206 3.5 11.1022 3.5 11.5ZM3.5 6.5C3.5 6.89782 3.34196 7.27936 3.06066 7.56066C2.77936 7.84196 2.39782 8 2 8C1.60218 8 1.22064 7.84196 0.93934 7.56066C0.658035 7.27936 0.5 6.89782 0.5 6.5C0.5 6.10218 0.658035 5.72064 0.93934 5.43934C1.22064 5.15804 1.60218 5 2 5C2.39782 5 2.77936 5.15804 3.06066 5.43934C3.34196 5.72064 3.5 6.10218 3.5 6.5ZM3.5 1.5C3.5 1.89782 3.34196 2.27936 3.06066 2.56066C2.77936 2.84196 2.39782 3 2 3C1.60218 3 1.22064 2.84196 0.93934 2.56066C0.658035 2.27936 0.5 1.89782 0.5 1.5C0.5 1.10218 0.658035 0.720644 0.93934 0.43934C1.22064 0.158035 1.60218 0 2 0C2.39782 0 2.77936 0.158035 3.06066 0.43934C3.34196 0.720644 3.5 1.10218 3.5 1.5Z\\" fill=\\"#1C1C1C\\" />\\n</symbol>"\n});\nvar project_menu_result = browser_sprite_build_default().add(project_menu_symbol);\n/* harmony default export */ const project_menu = ((/* unused pure expression or super */ null && (project_menu_symbol)));\n;// CONCATENATED MODULE: ./src/components/nav.js\nfunction createNav(data) {\n  return "<div class=\\"navigation\\">\\n    <div class=\\"navigation__container\\">\\n        <button class=\\"button navigation__button\\">".concat(data.buttonsName[0], "</button>\\n        <button class=\\"button navigation__button\\">").concat(data.buttonsName[1], "</button>\\n        <button class=\\"button navigation__button\\">").concat(data.buttonsName[2], "</button>\\n        <div class=\\"navigation__user\\">\\n            <button class=\\"navigation__user-container\\">\\n            <span class=\\"user-avatar navigation__user-avatar\\"></span>\\n            <svg class=\\"navigation__user-button\\"><use xlink:href=\\"#nav\\"></use>\\n            </svg>\\n            <div class=\\"dropdown nav-dropdown\\">\\n                    <ul class=\\"dropdown__list nav-dropdown\\">\\n                        <li><a class=\\"dropdown__link nav-dropdown\\">\\u041F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044C</a></li>\\n                        <li><a class=\\"dropdown__link nav-dropdown\\">\\u0412\\u044B\\u0445\\u043E\\u0434</a></li>\\n                    </ul>\\n                </div> </button>\\n        </div>\\n    </div>\\n</div>");\n}\nfunction toggleButton(event) {\n  if (event.target.classList.contains("button")) {\n    var activeButton = document.querySelector(".button_is_active");\n    if (activeButton && activeButton !== event.target) {\n      activeButton.classList.remove("button_is_active");\n    }\n    event.target.classList.add("button_is_active");\n  }\n}\nfunction toggleMenuNav(event) {\n  if (event.target.classList.contains("navigation__user") || event.target.classList.contains("navigation__user-container") || event.target.parentNode.classList.contains("navigation__user-container") || event.target.parentNode.classList.contains("navigation__user-button")) {\n    var userMenu = document.querySelector(".navigation__user");\n    var menuList = document.querySelector(".dropdown");\n    userMenu.classList.toggle("navigation__user_clicked");\n    menuList.classList.toggle("dropdown_is_opened");\n  }\n}\nfunction closeMenuNav(event) {\n  var menuList = document.querySelector(".dropdown");\n  if (!event.target.classList.contains("navigation__user") && !event.target.classList.contains("navigation__user-container") && !event.target.parentNode.classList.contains("navigation__user-container") && !event.target.parentNode.classList.contains("navigation__user-button") && !event.target.classList.contains(\'nav-dropdown\')) {\n    var userMenu = document.querySelector(".navigation__user");\n    menuList.classList.remove("dropdown_is_opened");\n    userMenu.classList.remove("navigation__user_clicked");\n  }\n}\n;// CONCATENATED MODULE: ./src/components/data.js\nvar data = {\n  buttonsName: [\'Проекты\', \'Задачи\', \'Пользователи\'],\n  projects: {\n    1: {\n      name: \'Название\',\n      number: \'1\',\n      creator: \'Здесь описание создания\',\n      changes: \'описание изменений\'\n    }\n  },\n  tasks: {\n    1: {\n      title: \'Описание задачи\',\n      number: \'1\',\n      creator: \'Здесь описание создания\',\n      changes: \'Здесь описание изменений\'\n    }\n  }\n};\n;// CONCATENATED MODULE: ./src/components/utils.js\nfunction createElement(func, container) {\n  var newElem = func;\n  container.insertAdjacentHTML("afterbegin", newElem);\n}\n;// CONCATENATED MODULE: ./src/components/project.js\nfunction createProject(data) {\n  return " <article class=\\"project item\\">\\n    <div class=\\"project__content content\\">\\n    <p class=\\"project__title title\\">".concat(data.projects["1"]["name"], "</p>\\n    <div class=\\"project__description description\\">\\n        <div class=\\"project__description-creation description-creation\\">\\n            <p class=\\"project__number number\\">#").concat(data.projects["1"]["number"], "</p>\\n            <p class=\\"project__creator creator\\">").concat(data.projects["1"]["creator"], "</p>\\n        </div>\\n        <p class=\\"project__description-changes description-changes\\">").concat(data.projects["1"]["changes"], "</p>\\n    </div>\\n</div>\\n<button class=\\"project__menu menu\\" data-dropdown=\\"menu-1\\">\\n    <svg class=\\"menu-image\\"><use xlink:href=\\"#project-menu\\"></use></svg>\\n    <div class=\\"project-dropdown project-dropdown-opened\\">\\n                    <ul class=\\"dropdown__list project-dropdown-opened\\">\\n                        <li><a class=\\"dropdown__link project-dropdown__link project-dropdown-opened\\">\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C</a></li>\\n                        <li><a class=\\"dropdown__link project-dropdown__link project-dropdown-opened\\"><span class=\\"project-dropdown-opened\\">\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C</span></a></li>\\n                    </ul>\\n    </div>\\n    </button> \\n</article>");\n}\nfunction closeMenuProject(event) {\n  if (!event.target.classList.contains("project__menu") && !event.target.parentNode.classList.contains("project__menu") && !event.target.classList.contains("project-dropdown-opened")) {\n    var dropdown = document.querySelector(".project-dropdown");\n    var menuButton = document.querySelector(".project__menu");\n    dropdown.classList.remove("dropdown_is_opened");\n    menuButton.classList.remove("menu_clicked");\n  }\n}\nfunction toggleMenuProject(event) {\n  if (event.target.classList.contains("project__menu") || event.target.parentNode.classList.contains("project__menu")) {\n    var dropdown = document.querySelector(".project-dropdown");\n    var menuButton = event.target.closest(".menu");\n    menuButton.classList.toggle("menu_clicked");\n    dropdown.classList.toggle("dropdown_is_opened");\n  }\n}\n;// CONCATENATED MODULE: ./src/components/task.js\nfunction createTask(data) {\n  return "<article class=\\"task item\\">\\n    <div class=\\"task__content content\\">\\n        <div class=\\"task__description-container\\">\\n            <p class=\\"task__title title\\">".concat(data["tasks"]["1"]["title"], "</p>\\n            <span class=\\"user-avatar task__user-avatar\\"></span>\\n        </div>\\n        <div class=\\"task__description description\\">\\n            <div class=\\"task__description-creation description-creation\\">\\n                <p class=\\"task__number number\\">#").concat(data["tasks"]["1"]["number"], "</p>\\n                <p class=\\"task__creator creator\\">").concat(data["tasks"]["1"]["creator"], "</p>\\n                <p class=\\"status task__status\\">\\u0427\\u0435\\u0440\\u043D\\u043E\\u0432\\u0438\\u043A</p>\\n            </div>\\n            <p class=\\"task__description-changes description-changes\\">").concat(data["tasks"]["1"]["changes"], "</p>\\n        </div>\\n    </div>\\n    <button class=\\"task__menu menu\\" data-dropdown=\\"menu-2\\">\\n    <svg class=\\"menu-image\\"><use xlink:href=\\"#project-menu\\"></use></svg>\\n    <div class=\\"project-dropdown task-dropdown\\" id=\'menu-2\'>\\n                    <ul class=\\"dropdown__list task-dropdown\\">\\n                        <li><a class=\\"dropdown__link project-dropdown__link task-dropdown\\">\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C</a></li>\\n                        <li><a class=\\"dropdown__link project-dropdown__link task-dropdown\\"><span class=\\"task-dropdown\\">\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C</span></a></li>\\n                    </ul>\\n    </div>\\n    </button>\\n</article>");\n}\nfunction closeMenuTask(event) {\n  if (!event.target.classList.contains("task__menu") && !event.target.parentNode.classList.contains("task__menu") && !event.target.classList.contains("task-dropdown")) {\n    var dropdown = document.querySelector(".task-dropdown");\n    var menuButton = document.querySelector(".task__menu");\n    dropdown.classList.remove("dropdown_is_opened");\n    menuButton.classList.remove("menu_clicked");\n  }\n}\nfunction toggleMenuTask(event) {\n  if (event.target.classList.contains("task__menu") || event.target.parentNode.classList.contains("task__menu")) {\n    var dropdown = document.querySelector(".task-dropdown");\n    var menuButton = event.target.closest(".menu");\n    menuButton.classList.toggle("menu_clicked");\n    dropdown.classList.toggle("dropdown_is_opened");\n  }\n}\n;// CONCATENATED MODULE: ./src/components/empty-project.js\nfunction createEmptyProjects() {\n  return "<div class=\\"container\\">\\n        <div class=\\"page\\">\\n           <p class=\\"page__text\\">\\u041D\\u0435 \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D \\u043D\\u0438 \\u043E\\u0434\\u0438\\u043D \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442</p>\\n           <button class=\\"button page__button\\">\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C</button>\\n        </div>\\n    </div>";\n}\n;// CONCATENATED MODULE: ./src/components/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction createPage() {\n  var container = document.querySelector("#app");\n  var projectContainer = document.querySelector(".project-container");\n  var taskContainer = document.querySelector(".task-container");\n  var emptyProjectsContainer = document.querySelector(".empty-projects-container");\n  createElement(createNav(data), container);\n  createElement(createProject(data), projectContainer);\n  createElement(createTask(data), taskContainer);\n  createElement(createEmptyProjects(), emptyProjectsContainer);\n  document.addEventListener("click", function (event) {\n    toggleButton(event);\n    toggleMenuNav(event);\n    toggleMenuProject(event);\n    toggleMenuTask(event);\n    closeMenuNav(event);\n    closeMenuProject(event);\n    closeMenuTask(event);\n  });\n}\ncreatePage();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///792\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U);var __webpack_exports__=__webpack_require__(792)})();